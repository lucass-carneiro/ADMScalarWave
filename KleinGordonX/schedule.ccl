# Schedule definitions for thorn KleinGordonX


# Define some schedule groups to organize the schedule

SCHEDULE GROUP KleinGordonX_StartupGroup AT STARTUP
{
} "Startup functions, such as banner registration and other startup information"

SCHEDULE GROUP KleinGordonX_ParamCheckGroup AT CCTK_PARAMCHECK
{
} "Check parameters"



SCHEDULE GROUP KleinGordonX_InitialGroup AT initial
{
} "Set up initial conditions"



SCHEDULE GROUP KleinGordonX_PostStepGroup AT postinitial
{
} "Post-process state variables"

SCHEDULE GROUP KleinGordonX_PostStepGroup AT postrestrict
{
} "Post-process state variables"

SCHEDULE GROUP KleinGordonX_PostStepGroup AT postregrid
{
} "Post-process state variables"



SCHEDULE GROUP KleinGordonX_PostStepGroup IN ODESolvers_PostStep BEFORE ADMBase_SetADMVars
{
} "Post-process state variables"

SCHEDULE GROUP KleinGordonX_RHSGroup IN ODESolvers_RHS
{
} "Calculate RHS"



SCHEDULE GROUP KleinGordonX_AnalysisGroup AT analysis
{
} "Analyse state"

################################################################################


SCHEDULE KleinGordonX_Startup IN KleinGordonX_StartupGroup
{
  LANG: C
} "Register banner"


SCHEDULE KleinGordonX_CheckParameters IN KleinGordonX_ParamCheckGroup
{
  LANG: C
} "Check parameters"


SCHEDULE KleinGordonX_Initialize IN KleinGordonX_InitialGroup
{
  LANG: C
  WRITES: Phi(interior) K_Phi(interior)
} "Set up initial conditions for the wave equation"

SCHEDULE KleinGordonX_Sync IN KleinGordonX_PostStepGroup
{
  LANG: C
  SYNC: evolved_group
} "Boundary conditions for the wave equation"

SCHEDULE KleinGordonX_Sync AT initial
{
  LANG: C
  SYNC: evolved_group
} "Boundary conditions for the wave equation"

SCHEDULE KleinGordonX_Boundaries IN KleinGordonX_PostStepGroup BEFORE TmunuBase_SetTmunuVars AFTER KleinGordonX_Sync
{
  LANG: C
  READS: evolved_group(interior)
  WRITES: evolved_group(boundary)
} "Boundary conditions for the wave equation"

SCHEDULE KleinGordonX_Boundaries AT initial BEFORE TmunuBase_SetTmunuVars AFTER KleinGordonX_Sync
{
  LANG: C
  READS: evolved_group(interior)
  WRITES: evolved_group(boundary)
} "Boundary conditions for the wave equation"



SCHEDULE KleinGordonX_EstimateError IN KleinGordonX_PostStepGroup AFTER (KleinGordonX_Sync KleinGordonX_Boundaries)
{
  LANG: C
  READS: Phi(interior) K_Phi(interior)
  WRITES: CarpetX::regrid_error(interior)
} "Estimate local error for regridding initial conditions"


if(fd_order == 2)
{
  SCHEDULE KleinGordonX_RHS_2 AS KleinGordonX_RHS IN KleinGordonX_RHSGroup
  {
	LANG: C
	READS: Phi(interior) K_Phi(interior)
	READS: ADMBase::metric(interior)
	READS: ADMBase::curv(interior)
	READS: ADMBase::lapse(interior)
	READS: ADMBase::shift(interior)
	WRITES: Phi_rhs(interior) K_Phi_rhs(interior)
	SYNC: rhs_group
  } "Compute the RHS of the field equations using 2nd order finite differences"
}

if(fd_order == 4)
{
  SCHEDULE KleinGordonX_RHS_4 AS KleinGordonX_RHS IN KleinGordonX_RHSGroup
  {
	LANG: C
	READS: Phi(interior) K_Phi(interior)
	READS: ADMBase::metric(interior)
	READS: ADMBase::curv(interior)
	READS: ADMBase::lapse(interior)
	READS: ADMBase::shift(interior)
	WRITES: Phi_rhs(interior) K_Phi_rhs(interior)
	SYNC: rhs_group
  } "Compute the RHS of the field equations using 4th order finite differences"
}

if(fd_order == 6)
{
  SCHEDULE KleinGordonX_RHS_6 AS KleinGordonX_RHS IN KleinGordonX_RHSGroup
  {
	LANG: C
	READS: Phi(interior) K_Phi(interior)
	READS: ADMBase::metric(interior)
	READS: ADMBase::curv(interior)
	READS: ADMBase::lapse(interior)
	READS: ADMBase::shift(interior)
	WRITES: Phi_rhs(interior) K_Phi_rhs(interior)
	SYNC: rhs_group
  } "Compute the RHS of the field equations using 6th order finite differences"
}

if(fd_order == 8)
{
  SCHEDULE KleinGordonX_RHS_8 AS KleinGordonX_RHS IN KleinGordonX_RHSGroup
  {
	LANG: C
	READS: Phi(interior) K_Phi(interior)
	READS: ADMBase::metric(interior)
	READS: ADMBase::curv(interior)
	READS: ADMBase::lapse(interior)
	READS: ADMBase::shift(interior)
	WRITES: Phi_rhs(interior) K_Phi_rhs(interior)
	SYNC: rhs_group
  } "Compute the RHS of the field equations using 8th order finite differences"
}

SCHEDULE KleinGordonX_RHSSync IN KleinGordonX_RHSGroup AFTER KleinGordonX_RHS
{
  LANG: C
  SYNC: rhs_group
} "Boundary conditions for the RHS of the wave equation"

SCHEDULE KleinGordonX_RHSBoundaries IN KleinGordonX_RHSGroup AFTER KleinGordonX_RHSSync
{
  LANG: C
  WRITES: Phi_rhs(boundary) K_Phi_rhs(boundary)
} "Boundary conditions for the RHS of the wave equation"



if(compute_energy)
{
  if(fd_order == 2)
  {
	SCHEDULE KleinGordonX_CalcTmunu_2 IN TmunuBase_AddToTmunu
	{
	  LANG: C
	  READS: Phi(everywhere) K_Phi(everywhere)
	  READS: ADMBase::metric(interior) ADMBase::lapse(interior) ADMBase::shift(interior)
	  READS: TmunuBase::eTtt(interior) TmunuBase::eTti(interior) TmunuBase::eTij(interior)
	  WRITES: TmunuBase::eTtt(interior) TmunuBase::eTti(interior) TmunuBase::eTij(interior)
	} "Calculate energy momentum tensor for the scalar field"
  }

  if(fd_order == 4)
  {
	SCHEDULE KleinGordonX_CalcTmunu_4 IN TmunuBase_AddToTmunu
	{
	  LANG: C
	  READS: Phi(everywhere) K_Phi(everywhere)
	  READS: ADMBase::metric(interior) ADMBase::lapse(interior) ADMBase::shift(interior)
	  READS: TmunuBase::eTtt(interior) TmunuBase::eTti(interior) TmunuBase::eTij(interior)
	  WRITES: TmunuBase::eTtt(interior) TmunuBase::eTti(interior) TmunuBase::eTij(interior)
	} "Calculate energy momentum tensor for the scalar field"
  }

  if(fd_order == 6)
  {
	SCHEDULE KleinGordonX_CalcTmunu_6 IN TmunuBase_AddToTmunu
	{
	  LANG: C
	  READS: Phi(everywhere) K_Phi(everywhere)
	  READS: ADMBase::metric(interior) ADMBase::lapse(interior) ADMBase::shift(interior)
	  READS: TmunuBase::eTtt(interior) TmunuBase::eTti(interior) TmunuBase::eTij(interior)
	  WRITES: TmunuBase::eTtt(interior) TmunuBase::eTti(interior) TmunuBase::eTij(interior)
	} "Calculate energy momentum tensor for the scalar field"
  }

  if(fd_order == 8)
  {
	SCHEDULE KleinGordonX_CalcTmunu_8 IN TmunuBase_AddToTmunu
	{
	  LANG: C
	  READS: Phi(everywhere) K_Phi(everywhere)
	  READS: ADMBase::metric(interior) ADMBase::lapse(interior) ADMBase::shift(interior)
	  READS: TmunuBase::eTtt(interior) TmunuBase::eTti(interior) TmunuBase::eTij(interior)
	  WRITES: TmunuBase::eTtt(interior) TmunuBase::eTti(interior) TmunuBase::eTij(interior)
	} "Calculate energy momentum tensor for the scalar field"
  }
}

if(compute_error)
{
  SCHEDULE KleinGordonX_Error IN KleinGordonX_AnalysisGroup
  {
    LANG: C
    READS: Phi(interior) K_Phi(interior)
    WRITES: Phi_err(interior) K_Phi_err(interior)
  } "Calculate error for the wave equation"
}