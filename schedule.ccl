# Schedule definitions for thorn ADMScalarWave

STORAGE:evolved_group[3]
STORAGE:rhs_group

schedule ADMScalarWave_Startup AT STARTUP
{
  LANG: C
} "Register banner"

schedule ADMScalarWave_CheckParameters AT CCTK_PARAMCHECK
{
  LANG: C
} "Check parameters"

schedule ADMScalarWave_Symmetries AT CCTK_WRAGH
{
  LANG: C
  OPTIONS: Global
} "Register symmetries of the grid functions"

schedule ADMScalarWave_RHSSymmetries AT BASEGRID
{
  LANG: C
  OPTIONS: META
} "Register symmetries of the grid functions"

schedule ADMScalarWave_ZeroRHS AT BASEGRID AFTER ADMScalarWave_RHSSymmetries
{
  LANG:C
} "Set all right hand side functions to zero to prevent spurious nans"

SCHEDULE ADMScalarWave_Initialize AT CCTK_INITIAL
{
  LANG: C
  READS: Grid::coordinates(Everywhere)
  WRITES: evolved_group(Everywhere)
  SYNC: evolved_group
} "Initialize evolved variables and RHS to zero"

SCHEDULE ADMScalarWave_MoLRegister IN MoL_Register
{
  LANG: C
  OPTIONS: META
} "Register variables"

schedule ADMScalarWave_ZeroRHS IN MoL_CalcRHS BEFORE ADMScalarWave_RHS
{
  LANG: C
} "Set all right hand side functions to zero to prevent spurious nans"

SCHEDULE ADMScalarWave_RHS IN MoL_CalcRHS
{
  LANG: C
} "Compute the RHS of the field equations"

SCHEDULE ADMScalarWave_OuterBoundary IN MoL_CalcRHS AFTER ADMScalarWave_RHS
{
  LANG: C
} "Apply outer boundary conditions"

if(excision_mask)
{
  SCHEDULE ADMScalarWave_ExcisionMask IN MoL_PostStep AFTER ADMScalarWave_Boundary
  {
    LANG: C
    READS: Grid::coordinates(Everywhere)
    READS: evolved_group(Everywhere)
    WRITES: evolved_group(Everywhere)
    SYNC: evolved_group
  } "Apply excision masks"
}

SCHEDULE ADMScalarWave_Boundary IN MoL_PostStep
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

schedule GROUP ApplyBCs as ADMScalarWave_ApplyBCs in MoL_PostStep AFTER ADMScalarWave_Boundary
{
} "Apply boundary conditions"

SCHEDULE ADMScalarWave_Boundary AT postrestrict
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

schedule GROUP ApplyBCs as ADMScalarWave_ApplyBCs AT postrestrict AFTER ADMScalarWave_Boundary
{
} "Apply boundary conditions"

SCHEDULE ADMScalarWave_Boundary AT postrestrictinitial
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

schedule GROUP ApplyBCs as ADMScalarWave_ApplyBCs AT postrestrictinitial AFTER ADMScalarWave_Boundary
{
} "Apply boundary conditions"

SCHEDULE ADMScalarWave_Boundary AT post_recover_variables
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

schedule GROUP ApplyBCs as ADMScalarWave_ApplyBCs AT post_recover_variables AFTER ADMScalarWave_Boundary
{
} "Apply boundary conditions"

SCHEDULE ADMScalarWave_Boundary AT postregrid
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

schedule GROUP ApplyBCs as ADMScalarWave_ApplyBCs AT postregrid AFTER ADMScalarWave_Boundary
{
} "Apply boundary conditions"