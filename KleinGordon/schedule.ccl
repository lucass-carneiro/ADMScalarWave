# Schedule definitions for thorn KleinGordon

# Storage allocations

STORAGE: evolved_group[3]
STORAGE: epsilon_group
STORAGE: error_group
STORAGE: rhs_group

# Define some schedule groups to organize the schedule

SCHEDULE GROUP KleinGordon_StartupGroup AT STARTUP
{
} "Startup functions, such as banner registration and other startup information"

SCHEDULE GROUP KleinGordon_ParamCheckGroup AT CCTK_PARAMCHECK
{
} "Check parameters"



SCHEDULE GROUP KleinGordon_InitialGroup AT initial
{
} "Set up initial conditions"

SCHEDULE GROUP KleinGordon_BaseGridGroup AT BASEGRID
{
} "Initialized grid variables with default values."



SCHEDULE GROUP KleinGordon_PostStepGroup AT postinitial
{
} "Post-process state variables"

SCHEDULE GROUP KleinGordon_PostStepGroup AT postrestrict
{
} "Post-process state variables"

SCHEDULE GROUP KleinGordon_PostStepGroup AT postregrid
{
} "Post-process state variables"



SCHEDULE GROUP KleinGordon_RegisterGroup IN MoL_Register
{
} "Post-process state variables"

SCHEDULE GROUP KleinGordon_PostStepGroup IN MoL_PostStep
{
} "Post-process state variables"

SCHEDULE GROUP KleinGordon_RHSGroup IN MoL_CalcRHS
{
} "Calculate RHS"



SCHEDULE GROUP KleinGordon_AnalysisGroup AT analysis
{
} "Analyse state"

################################################################################

SCHEDULE KleinGordon_Startup IN KleinGordon_StartupGroup
{
  LANG: C
} "Register banner"

SCHEDULE KleinGordon_CheckParameters IN KleinGordon_ParamCheckGroup
{
  LANG: C
} "Check parameters"



SCHEDULE KleinGordon_Initialize IN KleinGordon_InitialGroup
{
  LANG: C
  WRITES: Phi(everywhere) K_Phi(everywhere)
  SYNC: evolved_group
} "Initialize evolved variables and set the RHS to zero"



SCHEDULE KleinGordon_MoLRegister IN KleinGordon_RegisterGroup
{
  LANG: C
  OPTIONS: META
} "Register variables"



SCHEDULE KleinGordon_ZeroRHS IN KleinGordon_BaseGridGroup
{
  LANG: C
} "Set all right hand side functions to zero to prevent spurious nans"

SCHEDULE KleinGordon_ZeroError IN KleinGordon_BaseGridGroup
{
  LANG: C
} "Set the error functions to zero to prevent spurious nans"

SCHEDULE KleinGordon_ZeroEpsilon IN KleinGordon_BaseGridGroup
{
  LANG: C
} "Set the PDE energy function to zero to prevent spurious nans"



if(fd_order == 4)
{
  SCHEDULE KleinGordon_RHS_4 AS KleinGordon_RHS IN KleinGordon_RHSGroup
  {
	LANG: C
  } "Compute the RHS of the field equations using 4th order finite differences"
}

if(fd_order == 6)
{
  SCHEDULE KleinGordon_RHS_6 AS KleinGordon_RHS IN KleinGordon_RHSGroup
  {
	LANG: C
  } "Compute the RHS of the field equations using 6th order finite differences"
}

if(fd_order == 8)
{
  SCHEDULE KleinGordon_RHS_8 AS KleinGordon_RHS IN KleinGordon_RHSGroup
  {
	LANG: C
  } "Compute the RHS of the field equations using 8th order finite differences"
}

SCHEDULE KleinGordon_RHSSync IN KleinGordon_RHSGroup AFTER KleinGordon_RHS
{
  LANG: C
  SYNC: rhs_group
} "Boundary conditions for the RHS of the wave equation"

SCHEDULE KleinGordon_RHSBoundaries IN KleinGordon_RHSGroup AFTER KleinGordon_RHSSync
{
  LANG: C
  WRITES: Phi_rhs(boundary) K_Phi_rhs(boundary)
} "Apply outer boundary conditions"


SCHEDULE KleinGordon_EnforceSymBound IN MoL_PostStep
{
  LANG: C
  OPTIONS: LEVEL
} "Enforce symmetry boundary conditions"

SCHEDULE KleinGordon_Sync IN KleinGordon_PostStepGroup AFTER KleinGordon_EnforceSymBound
{
  LANG: C
  SYNC: evolved_group
} "Boundary conditions for the wave equation"

SCHEDULE KleinGordon_Boundaries IN KleinGordon_PostStepGroup AFTER KleinGordon_Sync
{
  LANG: C
  READS: Phi(interior) K_Phi(interior)
  WRITES: evolved_group(boundary)
} "Boundary conditions for the wave equation"



if(compute_energy)
{
  SCHEDULE KleinGordon_Energy IN KleinGordon_AnalysisGroup
  {
	LANG: C
	READS: ADMBase::metric(interior)
	READS: K_Phi(interior)
	WRITES: epsilon_group(interior)
	SYNC: epsilon_group
  } "Compute the associated PDE energy"
}

if(compute_error)
{
  SCHEDULE KleinGordon_Error IN KleinGordon_AnalysisGroup
  {
	LANG: C
	READS: Grid::coordinates(interior) Phi(interior) K_Phi(interior)
	WRITES: Phi_err(interior) K_Phi_err(interior)
	SYNC: error_group
  } "Compute the error of the evolution of an exact gaussian"
}