# SCHEDULE definitions for thorn KleinGordon

STORAGE:evolved_group[3]
STORAGE:epsilon_group[3]
STORAGE: error_group[3]
STORAGE:rhs_group

SCHEDULE KleinGordon_Startup AT STARTUP
{
  LANG: C
} "Register banner"

SCHEDULE KleinGordon_CheckParameters AT CCTK_PARAMCHECK
{
  LANG: C
} "Check parameters"

SCHEDULE KleinGordon_Symmetries AT CCTK_WRAGH
{
  LANG: C
  OPTIONS: Global
} "Register symmetries of the grid functions"

SCHEDULE KleinGordon_RHSSymmetries AT BASEGRID
{
  LANG: C
  OPTIONS: META
} "Register symmetries of the grid functions"

SCHEDULE KleinGordon_ZeroRHS AT BASEGRID AFTER KleinGordon_RHSSymmetries
{
  LANG:C
} "Set all right hand side functions to zero to prevent spurious nans"

SCHEDULE KleinGordon_Initialize AT CCTK_INITIAL
{
  LANG: C
  READS: Grid::coordinates(Everywhere)
  WRITES: evolved_group(Everywhere)
  SYNC: evolved_group
} "Initialize evolved variables and set the RHS to zero"

if(compute_energy)
{
  SCHEDULE KleinGordon_Energy IN CCTK_ANALYSIS
  {
	LANG: C
	READS: ADMBase::metric(Everywhere)
	READS: K_Phi(Everywhere)
	WRITES: epsilon_group(Everywhere)
	SYNC: epsilon_group
  } "Compute the associated PDE energy"
}

if(compute_error)
{
  SCHEDULE KleinGordon_Error IN CCTK_ANALYSIS
  {
	LANG: C
	READS: Phi(Everywhere) K_Phi(Everywhere)
	WRITES: Phi_err(Everywhere) K_Phi_err(Everywhere)
	SYNC: error_group
  } "Compute the associated PDE energy"
}

SCHEDULE KleinGordon_MoLRegister IN MoL_Register
{
  LANG: C
  OPTIONS: META
} "Register variables"

SCHEDULE KleinGordon_ZeroRHS IN MoL_CalcRHS BEFORE KleinGordon_RHS
{
  LANG: C
} "Set all right hand side functions to zero to prevent spurious nans"

if(fd_order == 4)
{
  SCHEDULE KleinGordon_RHS_4 AS KleinGordon_RHS IN MoL_CalcRHS
  {
	LANG: C
  } "Compute the RHS of the field equations using 4th order finite differences"
}

if(fd_order == 6)
{
  SCHEDULE KleinGordon_RHS_6 AS KleinGordon_RHS IN MoL_CalcRHS
  {
	LANG: C
  } "Compute the RHS of the field equations using 6th order finite differences"
}

if(fd_order == 8)
{
  SCHEDULE KleinGordon_RHS_8 AS KleinGordon_RHS IN MoL_CalcRHS
  {
	LANG: C
  } "Compute the RHS of the field equations using 8th order finite differences"
}

SCHEDULE KleinGordon_OuterBoundary IN MoL_CalcRHS AFTER KleinGordon_RHS
{
  LANG: C
} "Apply outer boundary conditions"

SCHEDULE KleinGordon_Boundary IN MoL_PostStep
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

SCHEDULE GROUP ApplyBCs as KleinGordon_ApplyBCs in MoL_PostStep AFTER KleinGordon_Boundary
{
} "Apply boundary conditions"

SCHEDULE KleinGordon_Boundary AT postrestrict
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

SCHEDULE GROUP ApplyBCs as KleinGordon_ApplyBCs AT postrestrict AFTER KleinGordon_Boundary
{
} "Apply boundary conditions"

SCHEDULE KleinGordon_Boundary AT postrestrictinitial
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

SCHEDULE GROUP ApplyBCs as KleinGordon_ApplyBCs AT postrestrictinitial AFTER KleinGordon_Boundary
{
} "Apply boundary conditions"

SCHEDULE KleinGordon_Boundary AT post_recover_variables
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

SCHEDULE GROUP ApplyBCs as KleinGordon_ApplyBCs AT post_recover_variables AFTER KleinGordon_Boundary
{
} "Apply boundary conditions"

SCHEDULE KleinGordon_Boundary AT postregrid
{
  LANG: C
  OPTIONS: LEVEL
  SYNC: evolved_group
} "Boundary enforcment"

SCHEDULE GROUP ApplyBCs as KleinGordon_ApplyBCs AT postregrid AFTER KleinGordon_Boundary
{
} "Apply boundary conditions"